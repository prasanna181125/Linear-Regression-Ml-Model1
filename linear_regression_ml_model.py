# -*- coding: utf-8 -*-
"""Linear Regression ML Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DV4E4rOjAcfl7ZC_Em0q7PBntoMzccmb
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

file_path='/content/Leads (1).csv'
df = pd.read_csv(file_path)

df.head()

n_f=["TotalVisits","Total Time Spent on Website","Page Views Per Visit","Asymmetrique Activity Score","Asymmetrique Profile Score"]

df_clean = df[n_f + ["Converted"]].dropna()

df_clean.info()

df_clean.head()

x=df_clean[n_f]
y=df_clean["Converted"]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)

model = LinearRegression()
model.fit(x_train, y_train)

y_predict = model.predict(x_test)

mse = mean_squared_error(y_test, y_predict)
r2 = r2_score(y_test, y_predict)

print("Mean : ", mse )
print("R2 : ", r2)

plt.figure(figsize=(10, 6))
sns.heatmap(df_clean.corr(), annot=True, cmap='coolwarm', fmt='.2f',linewidth=0.5)
plt.title('Correlation Heatmap')
plt.show()

plt.figure(figsize=(6,4))
sns.countplot(x=df_clean["Converted"],palette= "pastel")
plt.title("Converted")
plt.xlabel("Converted")
plt.ylabel("Count")
plt.show()

new_data = pd.DataFrame({
    "TotalVisits": [3,8],
    "Total Time Spent on Website": [90,200],
    "Page Views Per Visit": [2,5],
    "Asymmetrique Activity Score": [30,60],
    "Asymmetrique Profile Score" : [50,70]
})
pre= model.predict(new_data)
new_data['new predict'] = pre
print(new_data)

new_data_1= np.array([5,120,4,60,40,])
new_data_1= new_data_1.reshape(1,-1)
pre_1= model.predict(new_data_1)
print(pre_1)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_predict, alpha=0.6)
plt.plot([0, 1], [0, 1], "--", color="red")  # Perfect fit line
plt.title("Actual vs. Predicted Values")
plt.xlabel("Actual Converted Value")
plt.ylabel("Predicted Converted Value")
plt.show()

# 5. Residual Plot (Errors)
residuals = y_test - y_predict

plt.figure(figsize=(8, 5))
sns.histplot(residuals, bins=30, kde=True, color="purple")

plt.title("Residual Plot (Errors)")
plt.xlabel("Residuals (y_test - y_pred)")
plt.ylabel("Frequency")

plt.show()